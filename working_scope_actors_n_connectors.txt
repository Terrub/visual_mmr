Problem preface:

    I want a canvas (actor) hooked up to a renderingObject (actor). To be able
    to reuse the renderingobject, I don't want it to be directly tied to the
    canvas obviously. So I wish to use a controller of sorts that combines the
    two. A Connector of sorts.

    To be able to connect the two actors using the connector it will need a
    scope in which both actors Ã¡nd the connector can be instantiated, initiated
    or perhaps created. The definitions of both however have to be already
    established. (I'm not sure if this is really mandatory though.)


Specific question:

    The question then comes up: If I, as a director/constructor of the
    previously described link between actors using the connector, have to define
    the connection, then from which context or scope am I operating?
    Also, should I, can I or perhaps _must_ I be able to see all the expected
    behaviour (logic) and I/O (data) of both actors and the connector?


Further thoughts;

    Technically a connector is supposed to be a very simplistic link between two
    otherwise incompatible actors and hence is allowed to exist for only that
    specific use. The actors on the other hand should be made in such a way that
    they can be reused in different circumstances within the set boundries of
    the intended use of said actor.

    So to get back to my original situation: The canvas html element is designed
    for a large scale of uses. Being able to simply paint onto the element and
    displaying the resulting pixel values.

    The Render object that I had in mind is an object that can express itself
    in a visual manner.

    The connector would then be the 'driver' or logic interface between the
    drawing of the pixel values on the canvas and the relative visual
    descriptions generated by the render object.

    If need be, both the canvas and the render object could be hooked up to their
    own respective connectors that are both specific for the actor and a means
    of communication like for instance a network adaptor or binary data or
    electrical current, etc.

    So instead of having Actor: (A) and Actor: (B) directly hardcoded to
    oneanother.

        ( A | B )

    They can be connected using a connector:

        (A) -1- (B)

    But the connector itself does not have to interface directly with A and B.
    It can also be connected using a common medium: (C)

        (A) -1- (C) and
        (B) -2- (C)

    Which means that we could connect both using the same medium, either
    directly if the common medium (C) accepts more than one input or if no more
    than one input is needed:

        (A) -1- (C) -2- (B)
